buildscript {
    ext {
        springBootVersion = '2.1.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.moowork.node" version "1.3.1"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.monumental'
version = '0.0.1-SNAPSHOT'
targetCompatibility = '10'
sourceCompatibility = '10'

repositories {
    mavenCentral()
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('me.alidg:errors-spring-boot-starter:1.4.0')
    implementation('com.sun.xml.bind:jaxb-impl:2.3.0')
    implementation('com.sun.xml.bind:jaxb-core:2.3.0')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.10.0')
    implementation group: 'org.hibernate', name: 'hibernate-search-orm', version: '5.11.3.Final'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    implementation('com.google.maps:google-maps-services:0.10.1')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('junit:junit:4.12')
    testImplementation('org.mockito:mockito-core:2.1.0')
    testImplementation('com.h2database:h2:1.3.148')
}

node {
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("${project.projectDir}/client")
    args = ["install"]
}

task appNpmBuild(type: NpmTask, dependsOn: [appNpmInstall]) {
    description = "Builds production version of the webapp"
    workingDir = file("${project.projectDir}/client")
    args = ["run-script", "build"]
}

task copyWebApp(type: Copy, dependsOn: [appNpmBuild]) {
    from 'client/build'
    into 'build/resources/main/static/'
}

task dataLoad(type: JavaExec) {
    main = "util.InitialDataLoadApplication"
    classpath = sourceSets.main.getRuntimeClasspath()
}

// Enable this to ALWAYS build react when building the Java app
// processResources.dependsOn 'copyWebApp'
